// <auto-generated />
using DataAccessLayer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(MarcValidatorContext))]
    partial class MarcValidatorContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.13");

            modelBuilder.Entity("DataAccessLayer.EntityModels.FieldType", b =>
                {
                    b.Property<long>("IdFieldType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_field_type");

                    b.Property<string>("FieldType1")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("field_type");

                    b.HasKey("IdFieldType");

                    b.ToTable("field_type");
                });

            modelBuilder.Entity("DataAccessLayer.EntityModels.FieldValidation", b =>
                {
                    b.Property<long>("IdMarcField")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_marc_field");

                    b.Property<long>("IdValidationSet")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_validation_set");

                    b.Property<long>("IdValidation")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_validation");

                    b.Property<long>("IdValidationObligation")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_validation_obligation");

                    b.HasKey("IdMarcField", "IdValidationSet", "IdValidation", "IdValidationObligation");

                    b.HasIndex(new[] { "IdValidation" }, "fk_field_validation_validation1_idx");

                    b.HasIndex(new[] { "IdValidationObligation" }, "fk_field_validation_validation_obligation1_idx");

                    b.HasIndex(new[] { "IdValidationSet" }, "fk_field_validation_validation_set1_idx");

                    b.ToTable("field_validation");
                });

            modelBuilder.Entity("DataAccessLayer.EntityModels.MarcField", b =>
                {
                    b.Property<long>("IdMarcField")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_marc_field");

                    b.Property<long>("IdFieldType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_field_type");

                    b.Property<string>("Ind1")
                        .HasColumnType("VARCHAR(1)")
                        .HasColumnName("ind1");

                    b.Property<string>("Ind2")
                        .HasColumnType("VARCHAR(1)")
                        .HasColumnName("ind2");

                    b.Property<string>("Tag")
                        .HasColumnType("VARCHAR(3)")
                        .HasColumnName("tag");

                    b.HasKey("IdMarcField", "IdFieldType");

                    b.HasIndex("IdMarcField")
                        .IsUnique();

                    b.HasIndex(new[] { "IdFieldType" }, "fk_MARC_field_field_type_idx");

                    b.HasIndex(new[] { "IdMarcField" }, "id_marc_field_UNIQUE")
                        .IsUnique();

                    b.ToTable("marc_field");
                });

            modelBuilder.Entity("DataAccessLayer.EntityModels.MarcFieldHasSubfield", b =>
                {
                    b.Property<long>("IdSubfield")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_subfield");

                    b.Property<long>("IdMarcField")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_marc_field");

                    b.HasKey("IdSubfield");

                    b.HasIndex(new[] { "IdMarcField" }, "fk_marc_field_has_subfield_marc_field1_idx");

                    b.ToTable("marc_field_has_subfield");
                });

            modelBuilder.Entity("DataAccessLayer.EntityModels.Subfield", b =>
                {
                    b.Property<long>("IdSubfield")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_subfield");

                    b.Property<string>("SubfieldCode")
                        .IsRequired()
                        .HasColumnType("VARCHAR(1)")
                        .HasColumnName("subfield_code");

                    b.HasKey("IdSubfield");

                    b.ToTable("subfield");
                });

            modelBuilder.Entity("DataAccessLayer.EntityModels.Validation", b =>
                {
                    b.Property<long>("IdValidation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_validation");

                    b.Property<string>("Validation1")
                        .IsRequired()
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("validation");

                    b.HasKey("IdValidation");

                    b.ToTable("validation");
                });

            modelBuilder.Entity("DataAccessLayer.EntityModels.ValidationObligation", b =>
                {
                    b.Property<long>("IdValidationObligation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_validation_obligation");

                    b.Property<string>("Obligation")
                        .IsRequired()
                        .HasColumnType("VARCHAR(30)")
                        .HasColumnName("obligation");

                    b.HasKey("IdValidationObligation");

                    b.ToTable("validation_obligation");
                });

            modelBuilder.Entity("DataAccessLayer.EntityModels.ValidationSet", b =>
                {
                    b.Property<long>("IdValidationSet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_validation_set");

                    b.Property<string>("ValidationName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("validation_name");

                    b.HasKey("IdValidationSet");

                    b.HasIndex(new[] { "ValidationName" }, "validation_name_UNIQUE")
                        .IsUnique();

                    b.ToTable("validation_set");
                });

            modelBuilder.Entity("DataAccessLayer.EntityModels.FieldValidation", b =>
                {
                    b.HasOne("DataAccessLayer.EntityModels.MarcField", "IdMarcFieldNavigation")
                        .WithMany("FieldValidations")
                        .HasForeignKey("IdMarcField")
                        .HasPrincipalKey("IdMarcField")
                        .IsRequired();

                    b.HasOne("DataAccessLayer.EntityModels.Validation", "IdValidationNavigation")
                        .WithMany("FieldValidations")
                        .HasForeignKey("IdValidation")
                        .IsRequired();

                    b.HasOne("DataAccessLayer.EntityModels.ValidationObligation", "IdValidationObligationNavigation")
                        .WithMany("FieldValidations")
                        .HasForeignKey("IdValidationObligation")
                        .IsRequired();

                    b.HasOne("DataAccessLayer.EntityModels.ValidationSet", "IdValidationSetNavigation")
                        .WithMany("FieldValidations")
                        .HasForeignKey("IdValidationSet")
                        .IsRequired();

                    b.Navigation("IdMarcFieldNavigation");

                    b.Navigation("IdValidationNavigation");

                    b.Navigation("IdValidationObligationNavigation");

                    b.Navigation("IdValidationSetNavigation");
                });

            modelBuilder.Entity("DataAccessLayer.EntityModels.MarcField", b =>
                {
                    b.HasOne("DataAccessLayer.EntityModels.FieldType", "IdFieldTypeNavigation")
                        .WithMany("MarcFields")
                        .HasForeignKey("IdFieldType")
                        .IsRequired();

                    b.Navigation("IdFieldTypeNavigation");
                });

            modelBuilder.Entity("DataAccessLayer.EntityModels.MarcFieldHasSubfield", b =>
                {
                    b.HasOne("DataAccessLayer.EntityModels.MarcField", "IdMarcFieldNavigation")
                        .WithMany("MarcFieldHasSubfields")
                        .HasForeignKey("IdMarcField")
                        .HasPrincipalKey("IdMarcField")
                        .IsRequired();

                    b.HasOne("DataAccessLayer.EntityModels.Subfield", "IdSubfieldNavigation")
                        .WithOne("MarcFieldHasSubfield")
                        .HasForeignKey("DataAccessLayer.EntityModels.MarcFieldHasSubfield", "IdSubfield")
                        .IsRequired();

                    b.Navigation("IdMarcFieldNavigation");

                    b.Navigation("IdSubfieldNavigation");
                });

            modelBuilder.Entity("DataAccessLayer.EntityModels.FieldType", b =>
                {
                    b.Navigation("MarcFields");
                });

            modelBuilder.Entity("DataAccessLayer.EntityModels.MarcField", b =>
                {
                    b.Navigation("FieldValidations");

                    b.Navigation("MarcFieldHasSubfields");
                });

            modelBuilder.Entity("DataAccessLayer.EntityModels.Subfield", b =>
                {
                    b.Navigation("MarcFieldHasSubfield");
                });

            modelBuilder.Entity("DataAccessLayer.EntityModels.Validation", b =>
                {
                    b.Navigation("FieldValidations");
                });

            modelBuilder.Entity("DataAccessLayer.EntityModels.ValidationObligation", b =>
                {
                    b.Navigation("FieldValidations");
                });

            modelBuilder.Entity("DataAccessLayer.EntityModels.ValidationSet", b =>
                {
                    b.Navigation("FieldValidations");
                });
#pragma warning restore 612, 618
        }
    }
}
